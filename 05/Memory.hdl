// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load==1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    DMux4Way(in=load, sel=address[13..14], a=lv1A, b=lv1B, c=lv2, d=lv3);

    // If address is 00 OR 01, we want it to be RAM.  Else kb or screen
    Or(a=lv1A, b=lv1B, out=lv1);

    RAM16K(in=in, load=lv1, address=address[0..13], out=o1, out=o2);
    Screen(in=in, load=lv2, address=address[0..12], out=o3);
    Keyboard(out=o4);

    Mux4Way16(a=o1, b=o2, c=o3, d=o4, sel=address[13..14], out=out);

}
